# Generated by rustflake from the Cargo.toml and Cargo.lock
{
  inputs = {
      nixpkgs = {
          url = "github:nixos/nixpkgs/23.11";
        };
      levers = {
          url = "github:kquick/nix-levers";
          inputs.nixpkgs.follows = "nixpkgs";
        };
      aho-corasick-src = {
          url = "https://crates.io/api/v1/crates/aho-corasick/0.7.18/download";
          flake = false;
        };
      ansi_term-src = {
          url = "https://crates.io/api/v1/crates/ansi_term/0.11.0/download";
          flake = false;
        };
      anyhow-src = {
          url = "https://crates.io/api/v1/crates/anyhow/1.0.43/download";
          flake = false;
        };
      atty-src = {
          url = "https://crates.io/api/v1/crates/atty/0.2.14/download";
          flake = false;
        };
      autocfg-src = {
          url = "https://crates.io/api/v1/crates/autocfg/1.0.1/download";
          flake = false;
        };
      bitflags-src = {
          url = "https://crates.io/api/v1/crates/bitflags/1.2.1/download";
          flake = false;
        };
      block-buffer-src = {
          url = "https://crates.io/api/v1/crates/block-buffer/0.9.0/download";
          flake = false;
        };
      byteorder-src = {
          url = "https://crates.io/api/v1/crates/byteorder/1.4.3/download";
          flake = false;
        };
      cc-src = {
          url = "https://crates.io/api/v1/crates/cc/1.0.69/download";
          flake = false;
        };
      cfg-if-src = {
          url = "https://crates.io/api/v1/crates/cfg-if/1.0.0/download";
          flake = false;
        };
      clap-src = {
          url = "https://crates.io/api/v1/crates/clap/2.33.3/download";
          flake = false;
        };
      cpufeatures-src = {
          url = "https://crates.io/api/v1/crates/cpufeatures/0.1.5/download";
          flake = false;
        };
      digest-src = {
          url = "https://crates.io/api/v1/crates/digest/0.9.0/download";
          flake = false;
        };
      either-src = {
          url = "https://crates.io/api/v1/crates/either/1.6.1/download";
          flake = false;
        };
      filetime-src = {
          url = "https://crates.io/api/v1/crates/filetime/0.2.15/download";
          flake = false;
        };
      fs_extra-src = {
          url = "https://crates.io/api/v1/crates/fs_extra/1.2.0/download";
          flake = false;
        };
      generic-array-src = {
          url = "https://crates.io/api/v1/crates/generic-array/0.14.4/download";
          flake = false;
        };
      getrandom-src = {
          url = "https://crates.io/api/v1/crates/getrandom/0.2.3/download";
          flake = false;
        };
      glob-src = {
          url = "https://crates.io/api/v1/crates/glob/0.3.0/download";
          flake = false;
        };
      heck-src = {
          url = "https://crates.io/api/v1/crates/heck/0.3.3/download";
          flake = false;
        };
      hermit-abi-src = {
          url = "https://crates.io/api/v1/crates/hermit-abi/0.1.19/download";
          flake = false;
        };
      hex-src = {
          url = "https://crates.io/api/v1/crates/hex/0.4.3/download";
          flake = false;
        };
      itoa-src = {
          url = "https://crates.io/api/v1/crates/itoa/0.4.7/download";
          flake = false;
        };
      lazy_static-src = {
          url = "https://crates.io/api/v1/crates/lazy_static/1.4.0/download";
          flake = false;
        };
      libc-src = {
          url = "https://crates.io/api/v1/crates/libc/0.2.99/download";
          flake = false;
        };
      memchr-src = {
          url = "https://crates.io/api/v1/crates/memchr/2.4.0/download";
          flake = false;
        };
      memoffset-src = {
          url = "https://crates.io/api/v1/crates/memoffset/0.6.4/download";
          flake = false;
        };
      nix-src = {
          url = "https://crates.io/api/v1/crates/nix/0.22.1/download";
          flake = false;
        };
      num-traits-src = {
          url = "https://crates.io/api/v1/crates/num-traits/0.2.14/download";
          flake = false;
        };
      opaque-debug-src = {
          url = "https://crates.io/api/v1/crates/opaque-debug/0.3.0/download";
          flake = false;
        };
      os_pipe-src = {
          url = "https://crates.io/api/v1/crates/os_pipe/0.9.2/download";
          flake = false;
        };
      pete-src = {
          url = "https://crates.io/api/v1/crates/pete/0.7.0/download";
          flake = false;
        };
      ppv-lite86-src = {
          url = "https://crates.io/api/v1/crates/ppv-lite86/0.2.10/download";
          flake = false;
        };
      proc-macro-error-src = {
          url = "https://crates.io/api/v1/crates/proc-macro-error/1.0.4/download";
          flake = false;
        };
      proc-macro-error-attr-src = {
          url = "https://crates.io/api/v1/crates/proc-macro-error-attr/1.0.4/download";
          flake = false;
        };
      proc-macro2-src = {
          url = "https://crates.io/api/v1/crates/proc-macro2/1.0.28/download";
          flake = false;
        };
      quote-src = {
          url = "https://crates.io/api/v1/crates/quote/1.0.9/download";
          flake = false;
        };
      rand-src = {
          url = "https://crates.io/api/v1/crates/rand/0.8.4/download";
          flake = false;
        };
      rand_chacha-src = {
          url = "https://crates.io/api/v1/crates/rand_chacha/0.3.1/download";
          flake = false;
        };
      rand_core-src = {
          url = "https://crates.io/api/v1/crates/rand_core/0.6.3/download";
          flake = false;
        };
      rand_hc-src = {
          url = "https://crates.io/api/v1/crates/rand_hc/0.3.1/download";
          flake = false;
        };
      redox_syscall-src = {
          url = "https://crates.io/api/v1/crates/redox_syscall/0.2.10/download";
          flake = false;
        };
      regex-src = {
          url = "https://crates.io/api/v1/crates/regex/1.5.4/download";
          flake = false;
        };
      regex-syntax-src = {
          url = "https://crates.io/api/v1/crates/regex-syntax/0.6.25/download";
          flake = false;
        };
      remove_dir_all-src = {
          url = "https://crates.io/api/v1/crates/remove_dir_all/0.5.3/download";
          flake = false;
        };
      rmp-src = {
          url = "https://crates.io/api/v1/crates/rmp/0.8.10/download";
          flake = false;
        };
      rmp-serde-src = {
          url = "https://crates.io/api/v1/crates/rmp-serde/0.14.4/download";
          flake = false;
        };
      ryu-src = {
          url = "https://crates.io/api/v1/crates/ryu/1.0.5/download";
          flake = false;
        };
      serde-src = {
          url = "https://crates.io/api/v1/crates/serde/1.0.127/download";
          flake = false;
        };
      serde_derive-src = {
          url = "https://crates.io/api/v1/crates/serde_derive/1.0.127/download";
          flake = false;
        };
      serde_json-src = {
          url = "https://crates.io/api/v1/crates/serde_json/1.0.66/download";
          flake = false;
        };
      sha2-src = {
          url = "https://crates.io/api/v1/crates/sha2/0.9.5/download";
          flake = false;
        };
      slab_tree-src = {
          url = "https://crates.io/api/v1/crates/slab_tree/0.3.2/download";
          flake = false;
        };
      snowflake-src = {
          url = "https://crates.io/api/v1/crates/snowflake/1.3.0/download";
          flake = false;
        };
      strsim-src = {
          url = "https://crates.io/api/v1/crates/strsim/0.8.0/download";
          flake = false;
        };
      structopt-src = {
          url = "https://crates.io/api/v1/crates/structopt/0.3.22/download";
          flake = false;
        };
      structopt-derive-src = {
          url = "https://crates.io/api/v1/crates/structopt-derive/0.4.15/download";
          flake = false;
        };
      syn-src = {
          url = "https://crates.io/api/v1/crates/syn/1.0.74/download";
          flake = false;
        };
      tar-src = {
          url = "https://crates.io/api/v1/crates/tar/0.4.37/download";
          flake = false;
        };
      tempfile-src = {
          url = "https://crates.io/api/v1/crates/tempfile/3.2.0/download";
          flake = false;
        };
      textwrap-src = {
          url = "https://crates.io/api/v1/crates/textwrap/0.11.0/download";
          flake = false;
        };
      thiserror-src = {
          url = "https://crates.io/api/v1/crates/thiserror/1.0.26/download";
          flake = false;
        };
      thiserror-impl-src = {
          url = "https://crates.io/api/v1/crates/thiserror-impl/1.0.26/download";
          flake = false;
        };
      typenum-src = {
          url = "https://crates.io/api/v1/crates/typenum/1.13.0/download";
          flake = false;
        };
      unicode-segmentation-src = {
          url = "https://crates.io/api/v1/crates/unicode-segmentation/1.8.0/download";
          flake = false;
        };
      unicode-width-src = {
          url = "https://crates.io/api/v1/crates/unicode-width/0.1.8/download";
          flake = false;
        };
      unicode-xid-src = {
          url = "https://crates.io/api/v1/crates/unicode-xid/0.2.2/download";
          flake = false;
        };
      vec_map-src = {
          url = "https://crates.io/api/v1/crates/vec_map/0.8.2/download";
          flake = false;
        };
      version_check-src = {
          url = "https://crates.io/api/v1/crates/version_check/0.9.3/download";
          flake = false;
        };
      wasi-src = {
          url = "https://crates.io/api/v1/crates/wasi/0.10.2+wasi-snapshot-preview1/download";
          flake = false;
        };
      which-src = {
          url = "https://crates.io/api/v1/crates/which/4.2.2/download";
          flake = false;
        };
      winapi-src = {
          url = "https://crates.io/api/v1/crates/winapi/0.3.9/download";
          flake = false;
        };
      winapi-i686-pc-windows-gnu-src = {
          url = "https://crates.io/api/v1/crates/winapi-i686-pc-windows-gnu/0.4.0/download";
          flake = false;
        };
      winapi-x86_64-pc-windows-gnu-src = {
          url = "https://crates.io/api/v1/crates/winapi-x86_64-pc-windows-gnu/0.4.0/download";
          flake = false;
        };
      xattr-src = {
          url = "https://crates.io/api/v1/crates/xattr/0.2.2/download";
          flake = false;
        };
      xshell-src = {
          url = "https://crates.io/api/v1/crates/xshell/0.1.14/download";
          flake = false;
        };
      xshell-macros-src = {
          url = "https://crates.io/api/v1/crates/xshell-macros/0.1.14/download";
          flake = false;
        };
    };
  outputs = inps @ { self, nixpkgs, levers, ... }:
    {
        packages = levers.eachSystem (system:
              let pkgs = import nixpkgs { inherit system; };
                  rustBld = pname: src: version: deps:
                      pkgs.stdenv.mkDerivation {
                        pname = pname;
                        src = src;
                        version = version;
                        nativeBuildInputs = [ pkgs.rustc ];
                        unpackPhase = ''
                              if [ -d $src ] ; then
                                cp -r $src/* .
                              else
                                tar zxf $src
                                cd ${pname}-${version}
                              fi
                              rm -f Cargo.lock
                          '';
                        configurePhase = ''
                              mkdir -p .cargo
                              echo '[source.crates-io]' >> .cargo/config.toml
                              echo 'replace-with = "vendored-sources"' >> .cargo/config.toml
                              echo '[source.vendored-sources]' >> .cargo/config.toml
                              echo 'directory = "deps-srcs"' >> .cargo/config.toml
                              mkdir -p deps-srcs
                          '' + builtins.concatStringsSep "\n" (builtins.map (s: let ss = self.packages."${system}"."${s}-unpacked"; in "ln -s ${ss} deps-srcs/${s}") deps);
                        buildPhase = ''
                              ${pkgs.cargo}/bin/cargo build --offline
                          '';
                        installPhase = ''
                              mkdir -p $out/bin
                              for X in X $(${pkgs.findutils}/bin/find target -maxdepth 2 -executable -type f); do
                                if [ "X$X" != "XX" ]; then
                                  cp $X $out/bin/$(basename $X)
                                fi
                              done
                          '';
                      };
                  rustUnpack = pname: src: version:
                      pkgs.stdenv.mkDerivation {
                        pname = "${pname}-unpacked";
                        src = src;
                        version = version;
                        dontPatchShebangs = true;
                        unpackPhase = "tar zxf $src";
                        buildPhase = "";
                        installPhase = ''
                              mkdir -p $out
                              cp -r ${pname}-${version}/* $out
                              rm -f $out/Cargo.lock
                              ${pkgs.coreutils-full}/bin/sha256sum $(${pkgs.findutils}/bin/find $out -type f) | ${pkgs.gnused}/bin/sed -e "s@$out/@@" > cksums
                              ${pkgs.coreutils-full}/bin/sha256sum $src | ${pkgs.gnused}/bin/sed -e "s@$src@package@" >> cksums
                              echo -e "import json
                              with open('cksums','r') as f: d = { l.split()[1]:l.split()[0] for l in f }
                              j={'package':d['package']}
                              del d['package']
                              j['files']=d
                              print(json.dumps(j))" | ${pkgs.python3}/bin/python3 > $out/.cargo-checksum.json
                          '';
                        configurePhase = "";
                      };
              in  {
                    default = self.packages.${system}.build-bom;
                    build-bom = rustBld "build-bom" self "0.2.0" [
                        "clap"
                        "xshell"
                        "either"
                        "autocfg"
                        "ansi_term"
                        "winapi-i686-pc-windows-gnu"
                        "cfg-if"
                        "heck"
                        "tar"
                        "ppv-lite86"
                        "atty"
                        "rmp"
                        "opaque-debug"
                        "structopt-derive"
                        "rand"
                        "sha2"
                        "serde_json"
                        "proc-macro2"
                        "serde_derive"
                        "lazy_static"
                        "digest"
                        "aho-corasick"
                        "generic-array"
                        "winapi"
                        "structopt"
                        "block-buffer"
                        "cc"
                        "redox_syscall"
                        "num-traits"
                        "ryu"
                        "unicode-segmentation"
                        "unicode-width"
                        "rand_chacha"
                        "serde"
                        "libc"
                        "xattr"
                        "unicode-xid"
                        "os_pipe"
                        "which"
                        "thiserror"
                        "regex"
                        "pete"
                        "nix"
                        "snowflake"
                        "typenum"
                        "anyhow"
                        "slab_tree"
                        "syn"
                        "winapi-x86_64-pc-windows-gnu"
                        "glob"
                        "rand_core"
                        "rand_hc"
                        "fs_extra"
                        "tempfile"
                        "vec_map"
                        "getrandom"
                        "textwrap"
                        "remove_dir_all"
                        "memoffset"
                        "memchr"
                        "thiserror-impl"
                        "quote"
                        "regex-syntax"
                        "byteorder"
                        "strsim"
                        "proc-macro-error-attr"
                        "wasi"
                        "filetime"
                        "proc-macro-error"
                        "hermit-abi"
                        "xshell-macros"
                        "version_check"
                        "hex"
                        "itoa"
                        "cpufeatures"
                        "rmp-serde"
                        "bitflags"
                      ];
                    aho-corasick = rustBld "aho-corasick" inps.aho-corasick-src "0.7.18" [
                        "memchr"
                      ];
                    aho-corasick-unpacked = rustUnpack "aho-corasick" inps.aho-corasick-src "0.7.18";
                    ansi_term = rustBld "ansi_term" inps.ansi_term-src "0.11.0" [
                        "winapi"
                      ];
                    ansi_term-unpacked = rustUnpack "ansi_term" inps.ansi_term-src "0.11.0";
                    anyhow = rustBld "anyhow" inps.anyhow-src "1.0.43" [];
                    anyhow-unpacked = rustUnpack "anyhow" inps.anyhow-src "1.0.43";
                    atty = rustBld "atty" inps.atty-src "0.2.14" [
                        "hermit-abi"
                        "libc"
                        "winapi"
                        "hermit-abi"
                        "libc"
                        "winapi"
                        "winapi-i686-pc-windows-gnu"
                        "winapi-x86_64-pc-windows-gnu"
                      ];
                    atty-unpacked = rustUnpack "atty" inps.atty-src "0.2.14";
                    autocfg = rustBld "autocfg" inps.autocfg-src "1.0.1" [];
                    autocfg-unpacked = rustUnpack "autocfg" inps.autocfg-src "1.0.1";
                    bitflags = rustBld "bitflags" inps.bitflags-src "1.2.1" [];
                    bitflags-unpacked = rustUnpack "bitflags" inps.bitflags-src "1.2.1";
                    block-buffer = rustBld "block-buffer" inps.block-buffer-src "0.9.0" [
                        "generic-array"
                      ];
                    block-buffer-unpacked = rustUnpack "block-buffer" inps.block-buffer-src "0.9.0";
                    byteorder = rustBld "byteorder" inps.byteorder-src "1.4.3" [];
                    byteorder-unpacked = rustUnpack "byteorder" inps.byteorder-src "1.4.3";
                    cc = rustBld "cc" inps.cc-src "1.0.69" [
                        "cfg-if"
                        "getrandom"
                        "jobserver"
                        "libc"
                        "ppv-lite86"
                        "rand"
                        "rand_chacha"
                        "rand_core"
                        "rand_hc"
                        "redox_syscall"
                        "remove_dir_all"
                        "tempfile"
                        "wasi"
                        "winapi"
                        "winapi-i686-pc-windows-gnu"
                        "winapi-x86_64-pc-windows-gnu"
                      ];
                    cc-unpacked = rustUnpack "cc" inps.cc-src "1.0.69";
                    cfg-if = rustBld "cfg-if" inps.cfg-if-src "1.0.0" [];
                    cfg-if-unpacked = rustUnpack "cfg-if" inps.cfg-if-src "1.0.0";
                    clap = rustBld "clap" inps.clap-src "2.33.3" [
                        "ansi_term"
                        "atty"
                        "bitflags"
                        "strsim"
                        "textwrap"
                        "unicode-width"
                        "vec_map"
                        "aho-corasick"
                        "ansi_term"
                        "arrayref"
                        "arrayvec"
                        "atty"
                        "autocfg"
                        "base64"
                        "bitflags"
                        "blake2b_simd"
                        "byteorder"
                        "cfg-if"
                        "clippy"
                        "constant_time_eq"
                        "crossbeam-utils"
                        "dirs"
                        "either"
                        "getrandom"
                        "hermit-abi"
                        "idna"
                        "itertools"
                        "lazy_static"
                        "libc"
                        "matches"
                        "memchr"
                        "percent-encoding"
                        "proc-macro2"
                        "pulldown-cmark"
                        "quote"
                        "redox_syscall"
                        "redox_users"
                        "regex"
                        "regex-syntax"
                        "rust-argon2"
                        "semver-parser"
                        "serde"
                        "strsim"
                        "syn"
                        "term"
                        "term_size"
                        "textwrap"
                        "thread_local"
                        "tinyvec"
                        "toml"
                        "unicase"
                        "unicode-bidi"
                        "unicode-normalization"
                        "unicode-width"
                        "unicode-xid"
                        "url"
                        "vec_map"
                        "version-sync"
                        "version_check"
                        "wasi"
                        "winapi"
                        "winapi-i686-pc-windows-gnu"
                        "winapi-x86_64-pc-windows-gnu"
                        "yaml-rust"
                      ];
                    clap-unpacked = rustUnpack "clap" inps.clap-src "2.33.3";
                    cpufeatures = rustBld "cpufeatures" inps.cpufeatures-src "0.1.5" [
                        "libc"
                      ];
                    cpufeatures-unpacked = rustUnpack "cpufeatures" inps.cpufeatures-src "0.1.5";
                    digest = rustBld "digest" inps.digest-src "0.9.0" [
                        "generic-array"
                      ];
                    digest-unpacked = rustUnpack "digest" inps.digest-src "0.9.0";
                    either = rustBld "either" inps.either-src "1.6.1" [];
                    either-unpacked = rustUnpack "either" inps.either-src "1.6.1";
                    filetime = rustBld "filetime" inps.filetime-src "0.2.15" [
                        "cfg-if"
                        "libc"
                        "redox_syscall"
                        "winapi"
                      ];
                    filetime-unpacked = rustUnpack "filetime" inps.filetime-src "0.2.15";
                    fs_extra = rustBld "fs_extra" inps.fs_extra-src "1.2.0" [];
                    fs_extra-unpacked = rustUnpack "fs_extra" inps.fs_extra-src "1.2.0";
                    generic-array = rustBld "generic-array" inps.generic-array-src "0.14.4" [
                        "typenum"
                        "version_check"
                      ];
                    generic-array-unpacked = rustUnpack "generic-array" inps.generic-array-src "0.14.4";
                    getrandom = rustBld "getrandom" inps.getrandom-src "0.2.3" [
                        "cfg-if"
                        "libc"
                        "wasi"
                      ];
                    getrandom-unpacked = rustUnpack "getrandom" inps.getrandom-src "0.2.3";
                    glob = rustBld "glob" inps.glob-src "0.3.0" [];
                    glob-unpacked = rustUnpack "glob" inps.glob-src "0.3.0";
                    heck = rustBld "heck" inps.heck-src "0.3.3" [
                        "unicode-segmentation"
                      ];
                    heck-unpacked = rustUnpack "heck" inps.heck-src "0.3.3";
                    hermit-abi = rustBld "hermit-abi" inps.hermit-abi-src "0.1.19" [
                        "libc"
                      ];
                    hermit-abi-unpacked = rustUnpack "hermit-abi" inps.hermit-abi-src "0.1.19";
                    hex = rustBld "hex" inps.hex-src "0.4.3" [];
                    hex-unpacked = rustUnpack "hex" inps.hex-src "0.4.3";
                    itoa = rustBld "itoa" inps.itoa-src "0.4.7" [];
                    itoa-unpacked = rustUnpack "itoa" inps.itoa-src "0.4.7";
                    lazy_static = rustBld "lazy_static" inps.lazy_static-src "1.4.0" [];
                    lazy_static-unpacked = rustUnpack "lazy_static" inps.lazy_static-src "1.4.0";
                    libc = rustBld "libc" inps.libc-src "0.2.99" [];
                    libc-unpacked = rustUnpack "libc" inps.libc-src "0.2.99";
                    memchr = rustBld "memchr" inps.memchr-src "2.4.0" [];
                    memchr-unpacked = rustUnpack "memchr" inps.memchr-src "2.4.0";
                    memoffset = rustBld "memoffset" inps.memoffset-src "0.6.4" [
                        "autocfg"
                      ];
                    memoffset-unpacked = rustUnpack "memoffset" inps.memoffset-src "0.6.4";
                    nix = rustBld "nix" inps.nix-src "0.22.1" [
                        "bitflags"
                        "cc"
                        "cfg-if"
                        "libc"
                        "memoffset"
                      ];
                    nix-unpacked = rustUnpack "nix" inps.nix-src "0.22.1";
                    num-traits = rustBld "num-traits" inps.num-traits-src "0.2.14" [
                        "autocfg"
                      ];
                    num-traits-unpacked = rustUnpack "num-traits" inps.num-traits-src "0.2.14";
                    opaque-debug = rustBld "opaque-debug" inps.opaque-debug-src "0.3.0" [];
                    opaque-debug-unpacked = rustUnpack "opaque-debug" inps.opaque-debug-src "0.3.0";
                    os_pipe = rustBld "os_pipe" inps.os_pipe-src "0.9.2" [
                        "libc"
                        "winapi"
                        "libc"
                        "winapi"
                        "winapi-i686-pc-windows-gnu"
                        "winapi-x86_64-pc-windows-gnu"
                      ];
                    os_pipe-unpacked = rustUnpack "os_pipe" inps.os_pipe-src "0.9.2";
                    pete = rustBld "pete" inps.pete-src "0.7.0" [
                        "libc"
                        "memoffset"
                        "nix"
                        "thiserror"
                        "ansi_term"
                        "anyhow"
                        "atty"
                        "autocfg"
                        "bitflags"
                        "cc"
                        "cfg-if"
                        "clap"
                        "heck"
                        "hermit-abi"
                        "lazy_static"
                        "libc"
                        "memoffset"
                        "nix"
                        "ntest"
                        "ntest_proc_macro_helper"
                        "ntest_test_cases"
                        "ntest_timeout"
                        "proc-macro-crate"
                        "proc-macro-error"
                        "proc-macro-error-attr"
                        "proc-macro2"
                        "quote"
                        "serde"
                        "strsim"
                        "structopt"
                        "structopt-derive"
                        "syn"
                        "textwrap"
                        "thiserror"
                        "thiserror-impl"
                        "toml"
                        "unicode-segmentation"
                        "unicode-width"
                        "unicode-xid"
                        "vec_map"
                        "version_check"
                        "winapi"
                        "winapi-i686-pc-windows-gnu"
                        "winapi-x86_64-pc-windows-gnu"
                      ];
                    pete-unpacked = rustUnpack "pete" inps.pete-src "0.7.0";
                    ppv-lite86 = rustBld "ppv-lite86" inps.ppv-lite86-src "0.2.10" [];
                    ppv-lite86-unpacked = rustUnpack "ppv-lite86" inps.ppv-lite86-src "0.2.10";
                    proc-macro-error = rustBld "proc-macro-error" inps.proc-macro-error-src "1.0.4" [
                        "proc-macro-error-attr"
                        "proc-macro2"
                        "quote"
                        "syn"
                        "version_check"
                      ];
                    proc-macro-error-unpacked = rustUnpack "proc-macro-error" inps.proc-macro-error-src "1.0.4";
                    proc-macro-error-attr = rustBld "proc-macro-error-attr" inps.proc-macro-error-attr-src "1.0.4" [
                        "proc-macro2"
                        "quote"
                        "version_check"
                      ];
                    proc-macro-error-attr-unpacked = rustUnpack "proc-macro-error-attr" inps.proc-macro-error-attr-src "1.0.4";
                    proc-macro2 = rustBld "proc-macro2" inps.proc-macro2-src "1.0.28" [
                        "unicode-xid"
                      ];
                    proc-macro2-unpacked = rustUnpack "proc-macro2" inps.proc-macro2-src "1.0.28";
                    quote = rustBld "quote" inps.quote-src "1.0.9" [
                        "proc-macro2"
                      ];
                    quote-unpacked = rustUnpack "quote" inps.quote-src "1.0.9";
                    rand = rustBld "rand" inps.rand-src "0.8.4" [
                        "libc"
                        "rand_chacha"
                        "rand_core"
                        "rand_hc"
                        "bincode"
                        "byteorder"
                        "cfg-if"
                        "cfg-if"
                        "getrandom"
                        "libc"
                        "libm"
                        "log"
                        "packed_simd_2"
                        "ppv-lite86"
                        "proc-macro2"
                        "quote"
                        "rand_chacha"
                        "rand_core"
                        "rand_hc"
                        "rand_pcg"
                        "serde"
                        "serde_derive"
                        "syn"
                        "unicode-xid"
                        "wasi"
                      ];
                    rand-unpacked = rustUnpack "rand" inps.rand-src "0.8.4";
                    rand_chacha = rustBld "rand_chacha" inps.rand_chacha-src "0.3.1" [
                        "ppv-lite86"
                        "rand_core"
                      ];
                    rand_chacha-unpacked = rustUnpack "rand_chacha" inps.rand_chacha-src "0.3.1";
                    rand_core = rustBld "rand_core" inps.rand_core-src "0.6.3" [
                        "getrandom"
                      ];
                    rand_core-unpacked = rustUnpack "rand_core" inps.rand_core-src "0.6.3";
                    rand_hc = rustBld "rand_hc" inps.rand_hc-src "0.3.1" [
                        "rand_core"
                      ];
                    rand_hc-unpacked = rustUnpack "rand_hc" inps.rand_hc-src "0.3.1";
                    redox_syscall = rustBld "redox_syscall" inps.redox_syscall-src "0.2.10" [
                        "bitflags"
                      ];
                    redox_syscall-unpacked = rustUnpack "redox_syscall" inps.redox_syscall-src "0.2.10";
                    regex = rustBld "regex" inps.regex-src "1.5.4" [
                        "aho-corasick"
                        "memchr"
                        "regex-syntax"
                        "aho-corasick"
                        "cfg-if"
                        "getrandom"
                        "lazy_static"
                        "libc"
                        "memchr"
                        "quickcheck"
                        "rand"
                        "rand_core"
                        "regex-syntax"
                        "wasi"
                      ];
                    regex-unpacked = rustUnpack "regex" inps.regex-src "1.5.4";
                    regex-syntax = rustBld "regex-syntax" inps.regex-syntax-src "0.6.25" [];
                    regex-syntax-unpacked = rustUnpack "regex-syntax" inps.regex-syntax-src "0.6.25";
                    remove_dir_all = rustBld "remove_dir_all" inps.remove_dir_all-src "0.5.3" [
                        "winapi"
                      ];
                    remove_dir_all-unpacked = rustUnpack "remove_dir_all" inps.remove_dir_all-src "0.5.3";
                    rmp = rustBld "rmp" inps.rmp-src "0.8.10" [
                        "byteorder"
                        "num-traits"
                      ];
                    rmp-unpacked = rustUnpack "rmp" inps.rmp-src "0.8.10";
                    rmp-serde = rustBld "rmp-serde" inps.rmp-serde-src "0.14.4" [
                        "byteorder"
                        "rmp"
                        "serde"
                      ];
                    rmp-serde-unpacked = rustUnpack "rmp-serde" inps.rmp-serde-src "0.14.4";
                    ryu = rustBld "ryu" inps.ryu-src "1.0.5" [
                        "cfg-if"
                        "getrandom"
                        "hermit-abi"
                        "libc"
                        "no-panic"
                        "num_cpus"
                        "ppv-lite86"
                        "proc-macro2"
                        "quote"
                        "rand"
                        "rand_chacha"
                        "rand_core"
                        "rand_hc"
                        "rand_xorshift"
                        "syn"
                        "unicode-xid"
                        "wasi"
                      ];
                    ryu-unpacked = rustUnpack "ryu" inps.ryu-src "1.0.5";
                    serde = rustBld "serde" inps.serde-src "1.0.127" [
                        "serde_derive"
                      ];
                    serde-unpacked = rustUnpack "serde" inps.serde-src "1.0.127";
                    serde_derive = rustBld "serde_derive" inps.serde_derive-src "1.0.127" [
                        "proc-macro2"
                        "quote"
                        "syn"
                      ];
                    serde_derive-unpacked = rustUnpack "serde_derive" inps.serde_derive-src "1.0.127";
                    serde_json = rustBld "serde_json" inps.serde_json-src "1.0.66" [
                        "itoa"
                        "ryu"
                        "serde"
                      ];
                    serde_json-unpacked = rustUnpack "serde_json" inps.serde_json-src "1.0.66";
                    sha2 = rustBld "sha2" inps.sha2-src "0.9.5" [
                        "block-buffer"
                        "cfg-if"
                        "cpufeatures"
                        "digest"
                        "opaque-debug"
                        "blobby"
                        "block-buffer"
                        "byteorder"
                        "cc"
                        "cfg-if"
                        "cpufeatures"
                        "digest"
                        "generic-array"
                        "hex-literal"
                        "hex-literal-impl"
                        "libc"
                        "opaque-debug"
                        "proc-macro-hack"
                        "sha2-asm"
                        "typenum"
                        "version_check"
                      ];
                    sha2-unpacked = rustUnpack "sha2" inps.sha2-src "0.9.5";
                    slab_tree = rustBld "slab_tree" inps.slab_tree-src "0.3.2" [
                        "snowflake"
                        "snowflake"
                      ];
                    slab_tree-unpacked = rustUnpack "slab_tree" inps.slab_tree-src "0.3.2";
                    snowflake = rustBld "snowflake" inps.snowflake-src "1.3.0" [];
                    snowflake-unpacked = rustUnpack "snowflake" inps.snowflake-src "1.3.0";
                    strsim = rustBld "strsim" inps.strsim-src "0.8.0" [];
                    strsim-unpacked = rustUnpack "strsim" inps.strsim-src "0.8.0";
                    structopt = rustBld "structopt" inps.structopt-src "0.3.22" [
                        "clap"
                        "lazy_static"
                        "structopt-derive"
                        "ansi_term"
                        "arrayref"
                        "arrayvec"
                        "atty"
                        "autocfg"
                        "base64"
                        "bitflags"
                        "blake2b_simd"
                        "byteorder"
                        "cfg-if"
                        "clap"
                        "clippy"
                        "constant_time_eq"
                        "crossbeam-utils"
                        "dirs"
                        "dissimilar"
                        "getrandom"
                        "glob"
                        "heck"
                        "hermit-abi"
                        "itoa"
                        "lazy_static"
                        "libc"
                        "paw"
                        "paw-attributes"
                        "paw-raw"
                        "proc-macro-error"
                        "proc-macro-error-attr"
                        "proc-macro2"
                        "quote"
                        "redox_syscall"
                        "redox_users"
                        "rust-argon2"
                        "rustversion"
                        "ryu"
                        "serde"
                        "serde_derive"
                        "serde_json"
                        "strsim"
                        "structopt-derive"
                        "strum"
                        "strum_macros"
                        "syn"
                        "term"
                        "term_size"
                        "termcolor"
                        "textwrap"
                        "toml"
                        "trybuild"
                        "unicode-segmentation"
                        "unicode-width"
                        "unicode-xid"
                        "vec_map"
                        "version_check"
                        "wasi"
                        "winapi"
                        "winapi-i686-pc-windows-gnu"
                        "winapi-util"
                        "winapi-x86_64-pc-windows-gnu"
                        "yaml-rust"
                      ];
                    structopt-unpacked = rustUnpack "structopt" inps.structopt-src "0.3.22";
                    structopt-derive = rustBld "structopt-derive" inps.structopt-derive-src "0.4.15" [
                        "heck"
                        "proc-macro-error"
                        "proc-macro2"
                        "quote"
                        "syn"
                      ];
                    structopt-derive-unpacked = rustUnpack "structopt-derive" inps.structopt-derive-src "0.4.15";
                    syn = rustBld "syn" inps.syn-src "1.0.74" [
                        "proc-macro2"
                        "quote"
                        "unicode-xid"
                      ];
                    syn-unpacked = rustUnpack "syn" inps.syn-src "1.0.74";
                    tar = rustBld "tar" inps.tar-src "0.4.37" [
                        "filetime"
                        "libc"
                        "xattr"
                        "bitflags"
                        "cfg-if"
                        "filetime"
                        "getrandom"
                        "libc"
                        "ppv-lite86"
                        "rand"
                        "rand_chacha"
                        "rand_core"
                        "rand_hc"
                        "redox_syscall"
                        "remove_dir_all"
                        "tempfile"
                        "wasi"
                        "winapi"
                        "winapi-i686-pc-windows-gnu"
                        "winapi-x86_64-pc-windows-gnu"
                        "xattr"
                      ];
                    tar-unpacked = rustUnpack "tar" inps.tar-src "0.4.37";
                    tempfile = rustBld "tempfile" inps.tempfile-src "3.2.0" [
                        "cfg-if"
                        "libc"
                        "rand"
                        "redox_syscall"
                        "remove_dir_all"
                        "winapi"
                      ];
                    tempfile-unpacked = rustUnpack "tempfile" inps.tempfile-src "3.2.0";
                    textwrap = rustBld "textwrap" inps.textwrap-src "0.11.0" [
                        "unicode-width"
                      ];
                    textwrap-unpacked = rustUnpack "textwrap" inps.textwrap-src "0.11.0";
                    thiserror = rustBld "thiserror" inps.thiserror-src "1.0.26" [
                        "thiserror-impl"
                      ];
                    thiserror-unpacked = rustUnpack "thiserror" inps.thiserror-src "1.0.26";
                    thiserror-impl = rustBld "thiserror-impl" inps.thiserror-impl-src "1.0.26" [
                        "proc-macro2"
                        "quote"
                        "syn"
                      ];
                    thiserror-impl-unpacked = rustUnpack "thiserror-impl" inps.thiserror-impl-src "1.0.26";
                    typenum = rustBld "typenum" inps.typenum-src "1.13.0" [];
                    typenum-unpacked = rustUnpack "typenum" inps.typenum-src "1.13.0";
                    unicode-segmentation = rustBld "unicode-segmentation" inps.unicode-segmentation-src "1.8.0" [];
                    unicode-segmentation-unpacked = rustUnpack "unicode-segmentation" inps.unicode-segmentation-src "1.8.0";
                    unicode-width = rustBld "unicode-width" inps.unicode-width-src "0.1.8" [];
                    unicode-width-unpacked = rustUnpack "unicode-width" inps.unicode-width-src "0.1.8";
                    unicode-xid = rustBld "unicode-xid" inps.unicode-xid-src "0.2.2" [];
                    unicode-xid-unpacked = rustUnpack "unicode-xid" inps.unicode-xid-src "0.2.2";
                    vec_map = rustBld "vec_map" inps.vec_map-src "0.8.2" [];
                    vec_map-unpacked = rustUnpack "vec_map" inps.vec_map-src "0.8.2";
                    version_check = rustBld "version_check" inps.version_check-src "0.9.3" [];
                    version_check-unpacked = rustUnpack "version_check" inps.version_check-src "0.9.3";
                    wasi = rustBld "wasi" inps.wasi-src "0.10.2+wasi-snapshot-preview1" [];
                    wasi-unpacked = rustUnpack "wasi" inps.wasi-src "0.10.2+wasi-snapshot-preview1";
                    which = rustBld "which" inps.which-src "4.2.2" [
                        "either"
                        "lazy_static"
                        "libc"
                      ];
                    which-unpacked = rustUnpack "which" inps.which-src "4.2.2";
                    winapi = rustBld "winapi" inps.winapi-src "0.3.9" [
                        "winapi-i686-pc-windows-gnu"
                        "winapi-x86_64-pc-windows-gnu"
                      ];
                    winapi-unpacked = rustUnpack "winapi" inps.winapi-src "0.3.9";
                    winapi-i686-pc-windows-gnu = rustBld "winapi-i686-pc-windows-gnu" inps.winapi-i686-pc-windows-gnu-src "0.4.0" [];
                    winapi-i686-pc-windows-gnu-unpacked = rustUnpack "winapi-i686-pc-windows-gnu" inps.winapi-i686-pc-windows-gnu-src "0.4.0";
                    winapi-x86_64-pc-windows-gnu = rustBld "winapi-x86_64-pc-windows-gnu" inps.winapi-x86_64-pc-windows-gnu-src "0.4.0" [];
                    winapi-x86_64-pc-windows-gnu-unpacked = rustUnpack "winapi-x86_64-pc-windows-gnu" inps.winapi-x86_64-pc-windows-gnu-src "0.4.0";
                    xattr = rustBld "xattr" inps.xattr-src "0.2.2" [
                        "libc"
                      ];
                    xattr-unpacked = rustUnpack "xattr" inps.xattr-src "0.2.2";
                    xshell = rustBld "xshell" inps.xshell-src "0.1.14" [
                        "xshell-macros"
                        "xshell-macros"
                      ];
                    xshell-unpacked = rustUnpack "xshell" inps.xshell-src "0.1.14";
                    xshell-macros = rustBld "xshell-macros" inps.xshell-macros-src "0.1.14" [];
                    xshell-macros-unpacked = rustUnpack "xshell-macros" inps.xshell-macros-src "0.1.14";
                  });
      };
}